<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Ubuntu常用命令大全]]></title>
    <url>%2F2019%2F07%2F20%2FUbuntu%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%2F</url>
    <content type="text"><![CDATA[Ubuntu常用命令大全一、文件/文件夹管理 ls 列出当前目录文件（不包括隐含文件） ls -a 列出当前目录文件（包括隐含文件） ls -l 列出当前目录下文件的详细信息 cd .. 回当前目录的上一级目录 cd - 回上一次所在的目录 cd ~ 或 cd 回当前用户的宿主目录 mkdir 目录名 创建一个目录 rmdir 空目录名 删除一个空目录 rm 文件名 文件名 删除一个文件或多个文件 rm -rf 非空目录名 删除一个非空目录下的一切 mv 路经/文件 /经/文件移动相对路经下的文件到绝对路经下 mv 文件名 新名称 在当前目录下改名 find 路经 -name “字符串” 查找路经所在范围内满足字符串匹配的文件和目录 二、系统管理 fdisk fdisk -l 查看系统分区信息 fdisk fdisk /dev/sdb 为一块新的SCSI硬盘进行分区 chown chown root /home 把/home的属主改成root用户 chgrp chgrp root /home 把/home的属组改成root组 Useradd 创建一个新的用户 Groupadd 组名 创建一个新的组 Passwd 用户名 为用户创建密码 Passwd -d用户名 删除用户密码也能登陆 Passwd -S用户名 查询账号密码 Usermod -l 新用户名 老用户名 为用户改名 Userdel–r 用户名 删除用户一切 service [servicename] start/stop/restart 系统服务控制操作 /etc/init.d/[servicename] start/stop/restart 系统服务控制操作 uname -a 查看内核版本 cat /etc/issue 查看ubuntu版本 lsusb 查看usb设备 sudo ethtool eth0 查看网卡状态 cat /proc/cpuinfo 查看cpu信息 lshw 查看当前硬件信息 sudo fdisk -l 查看磁盘信息 df -h 查看硬盘剩余空间 free -m 查看当前的内存使用情况 ps -A 查看当前有哪些进程 kill 进程号(就是ps -A中的第一列的数字)或者 killall 进程名( 杀死一个进程) kill -9 进程号 强制杀死一个进程 reboot Init 6 重启LINUX系统 Halt Init 0 Shutdown –h now 关闭LINUX系统 三、打包/解压 tar -c 创建包 –x 释放包 -v 显示命令过程 –z 代表压缩包 tar –cvf benet.tar /home/benet 把/home/benet目录打包 tar –zcvf benet.tar.gz /mnt 把目录打包并压缩 tar –zxvf benet.tar.gz 压缩包的文件解压恢复 tar –jxvf benet.tar.bz2 解压缩 四、make编译 make 编译 make install 安装编译好的源码包 五、apt命令 apt-cache search package 搜索包 apt-cache show package 获取包的相关信息，如说明、大小、版本等 sudo apt-get install package 安装包 sudo apt-get install package - - reinstall 重新安装包 sudo apt-get -f install 修复安装”-f = –fix-missing” sudo apt-get remove package 删除包 sudo apt-get remove package - - purge 删除包，包括删除配置文件等 sudo apt-get update 更新源 sudo apt-get upgrade 更新已安装的包 sudo apt-get dist-upgrade 升级系统 sudo apt-get dselect-upgrade 使用 dselect 升级 apt-cache depends package 了解使用依赖 apt-cache rdepends package 是查看该包被哪些包依赖 sudo apt-get build-dep package 安装相关的编译环境 apt-get source package 下载该包的源代码 sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包 sudo apt-get check 检查是否有损坏的依赖 sudo apt-get clean 清理所有软件缓存（即缓存在/var/cache/apt/archives目录里的deb包）]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django项目之Dailyfresh实战日志二]]></title>
    <url>%2F2019%2F07%2F09%2FDjango%E9%A1%B9%E7%9B%AE%E4%B9%8BDailyfresh%E5%AE%9E%E6%88%98%E6%97%A5%E5%BF%97%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[user应用 关于注册 user下views.py文件register视图函数 123456789101112131415161718192021222324252627282930313233343536373839404142# /user/registerdef register(request): &quot;&quot;&quot;注册&quot;&quot;&quot; if request.method == &apos;GET&apos;: return render(request, &apos;register.html&apos;) # 显示注册页面 else: # 进行注册处理 # 接收数据 username = request.POST.get(&apos;user_name&apos;) password = request.POST.get(&apos;pwd&apos;) email = request.POST.get(&apos;email&apos;) allow = request.POST.get(&apos;allow&apos;) # 进行数据校验 if not all([username, password, email]): # 数据不完整 return render(request, &apos;register.html&apos;, &#123;&apos;errmsg&apos;: &apos;数据不完整&apos;&#125;) # 检验邮箱 if not re.match(r&apos;^[a-z0-9][\w.\-]*@[a-z0-9\-]+(\.[a-z]&#123;2,5&#125;)&#123;1,2&#125;$&apos;, email): return render(request, &apos;register.html&apos;, &#123;&apos;errmsg&apos;: &apos;邮箱格式不正确&apos;&#125;) if allow != &apos;on&apos;: return render(request, &apos;register.html&apos;, &#123;&apos;errmsg&apos;: &apos;请同意协议&apos;&#125;) # 校验用户是否重复 try: user = User.objects.get(username=username) except User.DoesNotExist: # 用户名不存在 user = None if user: return render(request, &apos;register.html&apos;, &#123;&apos;errmsg&apos;: &apos;用户已存在&apos;&#125;) # 进行业务处理：进行用户注册 user = User.objects.create_user(username, email, password) user.is_active = 0 user.save() # 返回应答,跳转首页 return redirect(reverse(&apos;goods:index&apos;)) 编辑template目录下register.html模版，这是一个手工活。 user下views.py文件RegisterView类视图]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>电商</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django项目之Dailyfresh实战日志一]]></title>
    <url>%2F2019%2F07%2F09%2FDjango%E9%A1%B9%E7%9B%AE%E4%B9%8BDailyfresh%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[环境MacOS 10.14.5python 3.7.3Django 2.1.4框架搭建 新建项目 1Django-admin startproject dailyfresh 新建应用 1234python3 manage.py startapp userpython3 manage.py startapp goodspython3 manage.py startapp cartpython3 manage.py startapp order Pycharm打开dailyfresh项目，新建templates，static目录，新建apps，db(python package)，新建的app移动到apps下，db下新建base_model.py，拷贝css、js、images等静态文件到static目录下。 项目setting.py设置 关于static 123# Static files (CSS, JavaScript, Images)STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS = [os.path.join(BASE_DIR, &apos;static&apos;)] 关于apps目录 1sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;)) 关于templates 123456789101112131415TEMPLATES = [ &#123; &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;, &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)], &apos;APP_DIRS&apos;: True, &apos;OPTIONS&apos;: &#123; &apos;context_processors&apos;: [ &apos;django.template.context_processors.debug&apos;, &apos;django.template.context_processors.request&apos;, &apos;django.contrib.auth.context_processors.auth&apos;, &apos;django.contrib.messages.context_processors.messages&apos;, ], &#125;, &#125;,] 关于应用定义 1234567891011121314INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;tinymce&apos;, # 富文本编辑器 &apos;apps.user&apos;, &apos;apps.goods&apos;, &apos;apps.cart&apos;, &apos;apps.order&apos;,] 关于数据库 1234567891011DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;dailyfresh&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;******&apos;, &apos;HOST&apos;: &apos;127.0.0.1&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125;&#125; 关于用户表 12# django认证系统使用的模型类AUTH_USER_MODEL = &apos;user.User&apos; 关于时区和语言 12LANGUAGE_CODE = &apos;zh-hans&apos;TIME_ZONE = &apos;Asia/Shanghai&apos; 关于富文本编辑器 123456# 富文本编辑器配置TINYMCE_DEFAULT_CONFIG = &#123; &apos;theme&apos;: &apos;advanced&apos;, &apos;width&apos;: 600, &apos;height&apos;: 400,&#125; 项目urls.py设置12345678910111213from django.contrib import adminfrom django.urls import path, includeurlpatterns = [ path(&apos;admin/&apos;, admin.site.urls), path(&apos;tinymce/&apos;, include(&apos;tinymce.urls&apos;)), # 富文本编辑器 # path(&apos;search/&apos;, include(&apos;haystack.urls&apos;)), # 全文检索框架 path(&apos;user/&apos;, include(&apos;user.urls&apos;, namespace=&apos;user&apos;)), # 用户模块 path(&apos;cart/&apos;, include(&apos;cart.urls&apos;, namespace=&apos;cart&apos;)), # 购物车模块 path(&apos;order/&apos;, include(&apos;order.urls&apos;, namespace=&apos;order&apos;)), # 订单模块 path(&apos;&apos;, include(&apos;goods.urls&apos;, namespace=&apos;goods&apos;)), # 商品模块] 各应用urls.py设置加入app = ‘应用名’，否则迁移出错 1234567from django.conf.urls import urlfrom apps.goods import viewsapp_name = &apos;goods&apos; # 迁移过程中报错，加入这段代码解决，原因不明urlpatterns = [ url(r&quot;^$&quot;, views.index, name=&quot;index&quot;), # 首页] 各应用model.py设置与表和关系设计有关，ER图辅助设计。迁移后可根据建立的数据库可以用MySQLWorkbench生成ER图。]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>电商</tag>
      </tags>
  </entry>
</search>
